<project xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant" name="CanaryServer" basedir=".">

	<!-- Properties -->
	<property file="${basedir}/canary.properties" />
	<property file="${basedir}/version.properties" />

	<property name="bin" value="${basedir}/bin" />
	<property name="build" value="${basedir}/build" />
	<property name="ivy" value="${basedir}/ivy" />
	<property name="jacoco" value="${basedir}/jacoco" />
	<property name="macker" value="${basedir}/macker" />
	<property name="pmd" value="${basedir}/pmd" />
	<property name="reports" value="${basedir}/reports" />
	<property name="src" value="${basedir}/src" />

	<property name="reports.junit" value="${reports}/junit" />
	<property name="reports.macker" value="${reports}/macker" />
	<property name="reports.pmd" value="${reports}/pmd" />
	<property name="reports.jacoco" value="${reports}/jacoco" />
	<property name="reports.javadoc" value="${reports}/javadoc" />

	<property name="src.main" value="${src}/main" />
	<property name="src.util" value="${src}/util" />
	<property name="src.test" value="${src}/test" />

	<property name="main.bin" value="${bin}/main" />
	<property name="main.java" value="${src.main}/java" />
	<property name="main.resources" value="${src.main}/resources" />
	<property name="main.sql" value="${src.main}/sql" />
	<property name="main.config" value="${main.resources}/config" />
	<property name="main.lib" value="${main.resources}/lib" />

	<property name="util.bin" value="${bin}/util" />
	<property name="util.java" value="${src.util}/java" />

	<property name="test.bin" value="${bin}/test" />
	<property name="test.java" value="${src.test}/java" />
	<property name="test.resources" value="${src.test}/resources" />
	<property name="test.lib" value="${test.resources}/lib" />

	<property name="ivy.version" value="2.1.0-rc2" />
	<property name="ivy.url" value="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar" />

	<property name="jacoco.version" value="0.7.2.201409121644" />
	<property name="jacoco.url" value="http://search.maven.org/remotecontent?filepath=org/jacoco/jacoco/${jacoco.version}/jacoco-${jacoco.version}.zip" />

	<!-- Paths -->
	<path id="ivy.classpath">
		<fileset dir="${ivy}" includes="**/*.jar" />
	</path>

	<path id="macker.classpath">
		<fileset dir="${macker}" includes="**/*.jar" />
	</path>

	<path id="pmd.classpath">
		<fileset dir="${pmd}" includes="**/*.jar" />
	</path>

	<path id="junit.classpath">
		<path refid="test.classpath" />
	</path>

	<path id="main.classpath">
		<pathelement location="${basedir}" />
		<pathelement location="${main.bin}" />
		<pathelement location="${main.config}" />
		<fileset dir="${main.lib}" includes="**/*.jar" />
	</path>

	<path id="util.classpath">
		<pathelement location="${basedir}" />
		<pathelement location="${util.bin}" />
		<path refid="main.classpath" />
	</path>

	<path id="test.classpath">
		<pathelement location="${basedir}" />
		<pathelement location="${test.bin}" />
		<fileset dir="${test.lib}" includes="**/*.jar" />
		<path refid="main.classpath" />
	</path>

	<!-- Targets -->
	<target name="check-properties">
		<available file="${basedir}/canary.properties" property="properties.found" />
	</target>

	<target name="assert-properties" depends="check-properties" unless="properties.found">
		<fail message="canary.properties required. See canary.properties.template." />
	</target>

	<target name="clean">
		<delete dir="${util.bin}" />
		<delete dir="${test.bin}" />
		<delete dir="${build}" />
		<delete dir="${macker}" />
		<delete dir="${pmd}" />
		<delete>
			<fileset dir="${logging.directory}" includes="**/*.log" />
		</delete>
		<delete dir="${reports}" />
		<delete dir="${main.lib}" />
		<delete dir="${test.lib}" />
	</target>

	<target name="purge" depends="clean">
		<delete dir="${bin}" />
		<delete dir="${ivy}" />
		<delete dir="${jacoco}" />
	</target>

	<!-- Ivy -->
	<target name="check-ivy">
		<available file="${ivy}/ivy-${ivy.version}.jar" property="ivy.found" />
	</target>

	<target name="download-ivy" depends="check-ivy" unless="ivy.found">
		<mkdir dir="${ivy}" />
		<get src="${ivy.url}" dest="${ivy}/ivy-${ivy.version}.jar" usetimestamp="true" />
	</target>

	<target name="init-ivy" depends="download-ivy">
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath" />
	</target>

	<target name="resolve-macker" depends="clean, init-ivy" unless="skip.macker">
		<mkdir dir="${macker}" />
		<ivy:retrieve pattern="${macker}/[artifact]-[revision].[ext]" conf="macker" />
	</target>

	<target name="resolve-pmd" depends="clean, init-ivy" unless="skip.pmd">
		<mkdir dir="${pmd}" />
		<ivy:retrieve pattern="${pmd}/[artifact]-[revision].[ext]" conf="pmd" />
	</target>

	<target name="resolve-main" depends="clean, init-ivy">
		<mkdir dir="${main.lib}" />
		<ivy:retrieve pattern="${main.lib}/[artifact]-[revision].[ext]" conf="main" />
	</target>

	<target name="resolve-test" depends="clean, init-ivy">
		<mkdir dir="${test.lib}" />
		<ivy:retrieve pattern="${test.lib}/[artifact]-[revision].[ext]" conf="test" />
	</target>

	<!-- JaCoCo -->
	<target name="check-jacoco">
		<available file="${jacoco}/lib/jacocoant.jar" property="jacoco.found" />
	</target>

	<target name="download-jacoco" depends="check-jacoco" unless="jacoco.found">
		<mkdir dir="${jacoco}" />
		<get src="${jacoco.url}" dest="${jacoco}/jacoco-${jacoco.version}.zip" usetimestamp="true" />
		<unzip src="${jacoco}/jacoco-${jacoco.version}.zip" dest="${jacoco}" />
	</target>

	<target name="init-jacoco" depends="download-jacoco">
		<taskdef resource="org/jacoco/ant/antlib.xml" uri="antlib:org.jacoco.ant">
			<classpath path="${jacoco}/lib/jacocoant.jar" />
		</taskdef>
	</target>

	<target name="enable-jacoco" depends="init-jacoco">
		<property name="jacoco.enabled" value="true" />
	</target>

	<!-- Compile -->
	<target name="compile-main" depends="resolve-main">
		<delete dir="${main.bin}" />
		<mkdir dir="${main.bin}" />
		<javac srcdir="${main.java}" destdir="${main.bin}" classpathref="main.classpath" includeantruntime="false" debug="true" />
	</target>

	<target name="compile-util" depends="resolve-main">
		<mkdir dir="${util.bin}" />
		<javac srcdir="${util.java}" destdir="${util.bin}" classpathref="util.classpath" includeantruntime="false" debug="true" />
	</target>

	<target name="compile-test" depends="resolve-test, compile-main">
		<mkdir dir="${test.bin}" />
		<javac srcdir="${test.java}" destdir="${test.bin}" classpathref="test.classpath" includeantruntime="false" debug="true" />
	</target>

	<!-- Macker -->
	<target name="no-macker">
		<property name="skip.macker" value="true" />
	</target>

	<target name="init-macker" depends="resolve-macker" unless="skip.macker">
		<taskdef name="macker" classname="net.innig.macker.ant.MackerAntTask" classpathref="macker.classpath" />
		<taskdef name="macker-report" classname="net.innig.macker.ant.MackerReportAntTask" classpathref="macker.classpath" />
	</target>

	<target name="macker" depends="init-macker, compile-test" unless="skip.macker" description="">
		<mkdir dir="${reports.macker}" />
		<macker printThreshold="info" xmlReportFile="${reports.macker}/macker.xml" failOnError="false" angerProperty="macker.failed">
			<rules dir="${basedir}" includes="macker.xml" />
			<classes dir="${test.bin}">
				<include name="**/*.class" />
			</classes>
			<classpath refid="macker.classpath" />
		</macker>
		<macker-report xmlReportfile="${reports.macker}/macker.xml" outputFile="${reports.macker}/macker.html" />
		<fail if="macker.failed" />
	</target>

	<!-- PMD -->
	<target name="no-pmd">
		<property name="skip.pmd" value="true" />
	</target>

	<target name="init-pmd" depends="resolve-pmd" unless="skip.pmd">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />
	</target>

	<target name="pmd" depends="init-pmd, compile-test" unless="skip.pmd" description="">
		<mkdir dir="${reports.pmd}" />
		<pmd shortFilenames="true" failOnRuleViolation="true">
			<ruleset>${basedir}/pmd.xml</ruleset>
			<formatter type="html" toFile="${reports.pmd}/pmd.html" />
			<fileset dir="${main.java}" includes="**/*.java" />
			<fileset dir="${test.java}" includes="**/*.java" />
		</pmd>
	</target>

	<!-- JUnit -->
	<target name="no-junit">
		<property name="skip.junit" value="true" />
	</target>

	<target name="junit" depends="init-jacoco, compile-test" unless="skip.junit" description="">
		<mkdir dir="${reports.junit}" />
		<jacoco:coverage enabled="${jacoco.enabled}" destfile="${reports.jacoco}/jacoco.exec">
			<junit printsummary="yes" haltonfailure="true" fork="true">
				<classpath refid="junit.classpath" />
				<jvmarg value="-Dlogging.directory=${logging.directory}" />
				<sysproperty key="log4j.configuration" value="file:${basedir}/log4j.properties" />
				<formatter type="xml" />
				<batchtest todir="${reports.junit}">
					<fileset dir="${test.java}">
						<include name="**/*Test.java" />
						<exclude name="**/Abstract*.java"/>
						<exclude name="**/*IntegrationTest*.java"/>
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
	</target>

	<target name="junit-integration" depends="init-jacoco, compile-test, database" unless="skip.junit" description="">
		<mkdir dir="${reports.junit}" />
		<jacoco:coverage enabled="${jacoco.enabled}" destfile="${reports.jacoco}/jacoco.exec">
			<junit printsummary="yes" haltonfailure="true" fork="true">
				<classpath refid="junit.classpath" />
				<jvmarg value="-Dlogging.directory=${logging.directory}" />
				<sysproperty key="log4j.configuration" value="file:${basedir}/log4j.properties" />
				<formatter type="xml" />
				<batchtest todir="${reports.junit}">
					<fileset dir="${test.java}">
						<include name="**/*IntegrationTest*.java"/>
						<exclude name="**/Abstract*.java"/>
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
	</target>

	<!-- JaCoCo -->
	<target name="jacoco" depends="enable-jacoco, junit, junit-integration" unless="skip.junit" description="">
		<jacoco:report>
			<executiondata>
				<file file="${reports.jacoco}/jacoco.exec" />
			</executiondata>
			<structure name="Canary">
				<classfiles>
					<fileset dir="${main.bin}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${main.java}" />
				</sourcefiles>
			</structure>
			<html destdir="${reports.jacoco}" />
		</jacoco:report>
	</target>

	<!-- Javadoc -->
	<target name="no-javadoc">
		<property name="skip.javadoc" value="true" />
	</target>

	<target name="javadoc" depends="compile-main" unless="skip.javadoc" description="">
		<mkdir dir="${reports.javadoc}" />
		<javadoc sourcepath="${main.java}" destdir="${reports.javadoc}">
			<classpath refid="main.classpath" />
		</javadoc>
	</target>

	<!-- Database -->
	<target name="database" depends="assert-properties, compile-util" description="">
		<sql driver="${database.driver}" url="jdbc:${database.url}" userid="${database.username}" password="${database.password}">
			<classpath>
				<pathelement location="${main.lib}/mysql-connector-java-5.1.34.jar" />
			</classpath>
			<transaction src="${main.sql}/drop-database.sql" />
			<transaction src="${main.sql}/create-database.sql" />
			<transaction src="${main.sql}/tables/message.sql" />
			<transaction src="${main.sql}/tables/user.sql" />
			<transaction src="${main.sql}/tables/permission.sql" />
			<transaction src="${main.sql}/tables/user_permission.sql" />
			<transaction src="${main.sql}/data.sql" />
		</sql>
		<java classname="org.canary.server.AdminUserGenerator" fork="true" failonerror="true">
			<classpath refid="util.classpath" />
			<jvmarg value="-Dlogging.directory=${logging.directory}" />
			<sysproperty key="log4j.configuration" value="file:${basedir}/log4j.properties" />
		</java>
	</target>

	<!-- Build -->
	<target name="just" depends="no-macker, no-pmd, no-junit, no-javadoc" />

	<target name="build" depends="compile-main" description="">
		<mkdir dir="${build}" />
		<exec executable="git" outputproperty="hash">
			<arg value="rev-parse" />
			<arg value="--short" />
			<arg value="HEAD" />
		</exec>
		<exec executable="git" outputproperty="diff">
			<arg value="diff" />
			<arg value="--shortstat" />
			<arg value="HEAD" />
		</exec>
		<condition property="canary.version" value="${version.number}.${hash}" else="${version.number}.${hash} (development)">
			<equals arg1="${diff}" arg2="" />
		</condition>
		<copy file="${main.config}/web.xml" tofile="${build}/web.xml">
			<filterchain>
				<replacetokens>
					<token key="canary.version" value="${canary.version}" />
				</replacetokens>
			</filterchain>
		</copy>
		<war destfile="${build}/canary-server.war" webxml="${build}/web.xml">
			<webinf dir="${main.config}">
				<exclude name="**/web.xml" />
			</webinf>
			<lib dir="${main.lib}" />
			<classes dir="${main.bin}" />
			<fileset file="${basedir}/log4j.properties" />
			<manifest>
				<attribute name="Canary-Version" value="${canary.version}" />
			</manifest>
		</war>
	</target>

	<target name="ci-build" depends="macker, pmd, enable-jacoco, junit, build, junit-integration, jacoco, javadoc" description="" />

</project>
